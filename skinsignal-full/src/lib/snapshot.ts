import {withClient} from "@/lib/db"; import {fetchSteamInventory,aggregateInventory} from "@/lib/steam"; import {fetchListings} from "@/lib/csfloat";
function median(a:number[]){if(!a.length) return 0; const s=[...a].sort((x,y)=>x-y); const m=Math.floor(s.length/2); return s.length%2?s[m]:(s[m-1]+s[m])/2}
function cat(n:string){const t=n.toLowerCase(); if(/(karambit|bayonet|butterfly|m9|knife)/.test(t)) return "Knives"; if(/(ak-47|awp|m4a1|m4a4|sg\s?553|aug|famas|galil)/.test(t)) return "Rifles"; if(/(glock|usp|p2000|p250|cz75|deagle|r8|dual|five-seven)/.test(t)) return "Pistols"; if(/gloves?/.test(t)) return "Gloves"; if(/sticker/.test(t)) return "Stickers"; if(/case/.test(t)) return "Cases"; return "Others" }
export async function takeSnapshot(steamId:string){const inv=await fetchSteamInventory(steamId); const items=aggregateInventory(inv); const valued:any[]=[]; for(const it of items){ let listings:any[]=[]; try{listings=await fetchListings(it.name)}catch{} const clean=listings.filter(l=>!l.stickers||l.stickers.length===0); const base=median((clean.length?clean:listings).map(l=>Number(l.price||0)).filter(Boolean)); const market=Math.min(...listings.map(l=>Number(l.price||Infinity))); const pct=(listings.find(l=>l.sticker_premium_pct!=null)?.sticker_premium_pct)??null; const prem=base*(pct??0); valued.push({name:it.name,qty:it.qty,category:cat(it.name),base_price_usd:base||null,sticker_sum_usd:null,sticker_premium_pct:pct,sticker_premium_usd: prem||null, valued_price_usd_market:isFinite(market)?market:base||0, valued_price_usd_effective:isFinite(market)?market:base||0, override_applied:false, float_value:null, paint_seed:null, stickers_json:null}); }
 return await withClient(async c=>{ const u=await c.query("INSERT INTO users(steam_id) VALUES($1) ON CONFLICT (steam_id) DO UPDATE SET steam_id=EXCLUDED.steam_id RETURNING id",[steamId]); const uid=u.rows[0].id; let total=0; for(const v of valued) total+=Number(v.valued_price_usd_effective||0)*Number(v.qty||0); const snap=await c.query("INSERT INTO inventory_snapshots(user_id,total_value) VALUES($1,$2) RETURNING id",[uid,total]); const sid=snap.rows[0].id; if(valued.length){ const values=valued.map((_,i)=>`($1,$${i*13+2},$${i*13+3},$${i*13+4},$${i*13+5},$${i*13+6},$${i*13+7},$${i*13+8},$${i*13+9},$${i*13+10},$${i*13+11},$${i*13+12},$${i*13+13},$${i*13+14})`).join(","); const text=`INSERT INTO item_snapshots (snapshot_id,name,qty,category,base_price_usd,sticker_sum_usd,sticker_premium_pct,sticker_premium_usd,valued_price_usd_market,valued_price_usd_effective,override_applied,float_value,paint_seed,stickers_json) VALUES ${values}`; const params:any[]=[sid]; for(const v of valued){params.push(v.name,v.qty,v.category,v.base_price_usd,v.sticker_sum_usd,v.sticker_premium_pct,v.sticker_premium_usd,v.valued_price_usd_market,v.valued_price_usd_effective,v.override_applied,v.float_value,v.paint_seed,v.stickers_json)} await c.query(text,params)} return {snapshot_id:sid,total_value:total}; }); }
