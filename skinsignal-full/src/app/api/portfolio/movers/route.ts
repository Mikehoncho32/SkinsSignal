import {NextResponse} from "next/server"; import {withClient} from "@/lib/db"; export const runtime="nodejs"; export const dynamic="force-dynamic"; export async function GET(req:Request){ const {searchParams}=new URL(req.url); const steamId=String(searchParams.get("steamId")||""); if(!/^[0-9]{17}$/.test(steamId)) return NextResponse.json({error:"invalid_steam_id"},{status:400}); try{ const result=await withClient(async c=>{ type IdRow={id:number}; type ItemRow={name:string;qty:number|string;valued_price_usd_effective:number|string|null}; const u=await c.query("SELECT id FROM users WHERE steam_id=$1",[steamId]); const users=(u.rows as unknown as IdRow[]); if(!users.length) return {gainers:[],losers:[]}; const uid=users[0].id; const snaps=await c.query("SELECT id FROM inventory_snapshots WHERE user_id=$1 ORDER BY taken_at DESC LIMIT 2",[uid]); const srows=(snaps.rows as unknown as IdRow[]); if(srows.length<2) return {gainers:[],losers:[]}; const [sidNow,sidPrev]=[srows[0].id,srows[1].id]; const nowRes=await c.query("SELECT name,qty,valued_price_usd_effective FROM item_snapshots WHERE snapshot_id=$1",[sidNow]); const prevRes=await c.query("SELECT name,qty,valued_price_usd_effective FROM item_snapshots WHERE snapshot_id=$1",[sidPrev]); const prev=(prevRes.rows as unknown as ItemRow[]); const now=(nowRes.rows as unknown as ItemRow[]); const pmap=new Map<string,number>(); for(const r of prev){pmap.set(r.name,Number(r.qty)*Number(r.valued_price_usd_effective??0))} const deltas:{name:string;usd:number;pct:number}[]=[]; for(const r of now){ const cur=Number(r.qty)*Number(r.valued_price_usd_effective??0); const was=pmap.get(r.name)??0; const d=cur-was; const pct=was?(d/was)*100:(cur?100:0); deltas.push({name:r.name,usd:d,pct}) } deltas.sort((a,b)=>b.usd-a.usd); return {gainers:deltas.slice(0,3),losers:deltas.slice(-3).reverse()}; }); return NextResponse.json(result); } catch(e:any){ return NextResponse.json({error:e?.message||"movers_failed"},{status:500}) } }
