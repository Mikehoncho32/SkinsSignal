import {NextResponse} from "next/server"; import {withClient} from "@/lib/db"; export const runtime="nodejs"; export const dynamic="force-dynamic"; export async function GET(req:Request){ const {searchParams}=new URL(req.url); const steamId=String(searchParams.get("steamId")||""); if(!/^[0-9]{17}$/.test(steamId)) return NextResponse.json({error:"invalid_steam_id"},{status:400}); try{ const data=await withClient(async c=>{ const u=await c.query("SELECT id FROM users WHERE steam_id=$1",[steamId]); if(!u.rowCount) return {history:[]}; const uid=u.rows[0].id; const h=await c.query("SELECT taken_at,total_value FROM inventory_snapshots WHERE user_id=$1 ORDER BY taken_at ASC",[uid]); const last=await c.query("SELECT id,total_value FROM inventory_snapshots WHERE user_id=$1 ORDER BY taken_at DESC LIMIT 1",[uid]); let items:any[]|undefined; if(last.rowCount){ const ii=await c.query("SELECT name,qty,valued_price_usd_market as market,valued_price_usd_effective as my,override_applied as override,sticker_premium_pct as sticker_pct FROM item_snapshots WHERE snapshot_id=$1",[last.rows[0].id]); items=ii.rows as any[]; } return {history:h.rows,lastSnapshot: items? {total:last.rows[0].total_value, items}:undefined}; }); return NextResponse.json(data); } catch(e:any){ return NextResponse.json({error:e?.message||"history_failed"},{status:500}) } }
