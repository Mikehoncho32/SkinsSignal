import {NextResponse} from "next/server"; import {withClient} from "@/lib/db"; export const runtime="nodejs"; export const dynamic="force-dynamic"; export async function GET(req:Request){ const {searchParams}=new URL(req.url); const steamId=String(searchParams.get("steamId")||""); if(!/^[0-9]{17}$/.test(steamId)) return NextResponse.json({error:"invalid_steam_id"},{status:400}); try{ const data=await withClient(async c=>{ const u=await c.query("SELECT id FROM users WHERE steam_id=$1",[steamId]); if(!u.rowCount) return {slices:[]}; const uid=u.rows[0].id; const last=await c.query("SELECT id FROM inventory_snapshots WHERE user_id=$1 ORDER BY taken_at DESC LIMIT 1",[uid]); if(!last.rowCount) return {slices:[]}; const sid=last.rows[0].id; const items=await c.query("SELECT category,qty,valued_price_usd_effective FROM item_snapshots WHERE snapshot_id=$1",[sid]); const m=new Map<string,number>(); for(const r of items.rows){const v=Number(r.qty)*Number(r.valued_price_usd_effective??0); m.set(r.category||"Others",(m.get(r.category||"Others")||0)+v)} return {slices:Array.from(m.entries()).map(([label,value])=>({label,value}))}; }); return NextResponse.json(data); } catch(e:any){ return NextResponse.json({error:e?.message||"allocation_failed"},{status:500}) } }
